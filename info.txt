Steps to create a Cucumber BDD framework

1. Create a new Maven project and add project dependencies
   -selenium, cucumber-java, cucumber-junit, cucumber-core, faker.
1a.Add the necessary framework components (.properties file, .gitignore, utility classes )
2. Create a package structure (pages,runners, stepDefinitions, utils)
3. Create resources folder under test and add a feature file (add Cucumber Java and Gherkin plugin to IntelliJ)
4. Create a cucumber feature file (feature file represents a user story, should be named after a feature, e.g. sign-in.feature)
5. Create a Runner class that connects the feature file steps to step definitions and add the necessary configuration
6. Generate step definition methods for unimplemented steps
7. Implement each step definition method's logic
8. To run a specific scenario/s, mark the scenario with a specific tag (@temp) and then run it through the Runner class by mentioning the tag in tags option


In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions glue option in Runner class
  - Cucumber scenario step is matched to step definition method using the text of the scenario step
    either with Cucumber Expressions or Regular Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class
  - Cucumber offers 3 types of Hooks: @BeforeAll, @AfterAll, @Before, @After, @BeforeStep, @AfterStep



How Cucumber Background is different from Hook?
1. Purpose: Hook is used for configuration logic whereas Background is used for test logic
2. Scope: Hook is applicable to all scenarios whereas Background is applicable only to scenarios within a single feature file



Reporting in Cucumber Framework
- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {"html:target/basic-report/report.html"}

How did you implement taking a screenshot on failure in Cucumber?
- In @After hook, we used Scenario class and checked if scenario is failed, and took a screenshot with Selenium and attached the scrrenshot file with Scenario class's attach method.
  e.g. public void tearDownScenario(Scenario scenario){
          if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), "image/png", "screenshot");
          }
    }


How do you run your scenarios through CMD in Cucumber framework?
- Using Maven Surefire plugin and mvn test command
    e.g.
    <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0</version>
                        <configuration>
                           <includes>
                               <include>CucumberRunner.java</include>
                           </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>





How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags="@positive"
mvn test -D cucumber.filter.tags="@positive and @smoke"
mvn test -D cucumber.filter.tags="@positive or @smoke"

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class's tags.


Lombok is used to reduce boilerplate code for classes, e.g., it can generate getters and setters for those objects automatically by using Lombok annotations.
The easiest way is to use the @Data annotation.
In our Framework we used Lombok annotation @Data for our Page classes to automatically generate getter methods to be accessible outside in our Test code.


Cucumber Data Table - a cucumber feature that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                                into the step definition method

             Example:           Given I am on homepage
                                When I pass this information
                                | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |

              The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
              Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
               Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long

           When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
           unmodifiable versions of these data structures.
           If you need to modify, you need to convert into a modifiable type.


DocString

If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """



What are some common Cucumber exceptions?

           UndefinedStepException -  when a scenario step does not have matching step definition method

           PendingException - default exception that added to each step definition snippet

           AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions

           DuplicateStepDefinitionException - happens when there are more than one step definitions with the exactly matching text

           CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                              type does not match the datatable


What is the difference between Cucumber Data Table and Scenario Outline's Examples table?

Data Table belongs to a single step of a scenario whereas Examples table belongs to the entire Scenario Outline.
We use Data Table when we want to pass table-style data (multiple sets of data) into a single step.
We use Examples table with Cucumber Scenario Outline when we want to run the same scenario multiple times with different input.



Cucumber comes with built-in Junit 4 by default and it does not have soft assertions.
Hence we can use AssertJ library to implement soft assertions:
           Ex:
                SoftAssertions softAssertions = new SoftAssertions();
                softAssertions.assertThat("actual").isEqualTo("expected");
                softAssertions.assertThat("actual2").isEqualTo("expected2");
                softAssertions.assertThat("actual3").isEqualTo("expected3");
                softAssertions.assertAll();


Parallel and cross-browser tests can be implemented in following ways:
1. Selenium Grid: server that automatically runs your tests in distributed mode on multiple browsers,operating systems, platforms
   Requires complex installation and configuration.
   I used Selenium Grid by sending the framework tests to a remote server url using RemoteWebDriver.
2. Using third-party cloud providers such as SauceLabs, BrowserStack.
   Requires subscription and costs money.
3. Implement running cross-browser and parallel tests natively in your framework.
   Requires powerful server to run the tests.



 How to implement parallelism in Cucumber framework?

 We can enable parallel test in Cucumber natively with JUnit.

 But we need to remember that with this option you can run only FEATURES in parallel.

  If there is a need for running SCENARIOS in parallel, you can incorporate TestNG , but that requires extra configuration and setup.


               Steps to implement running parallel Features in Cucumber with Junit:

                1.Give the scope of the feature files that you want to run in parallel in your runner class
                     features = "src/test/resources"
                  Optionally create a separate folder for feature files that you want to run in parallel and indicate that path
                        features = "src/test/resources/parallel"

                2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                       <parallel>methods</parallel>
                       <useUnlimitedThreads>true</useUnlimitedThreads>

                3. If you want to limit the threads:
                  <parallel>methods</parallel>
                   <threadCount>6</threadCount>

                4. Run the tests thru command line with mvn test command



                TDD (Test Driven Development) - TestNG based framework
                BDD (Behavior Driven Development) - Cucumber+Junit based framework



  Tell me about your framework?

  General description -> components -> architecture -> more details (packages, classes)


  It is a Cucumber BDD test automation framework allows us to write test cases in Gherkin format
  as Cucumber scenarios which is understandable to all participants. The framework tech stack includes Java, Cucumber, Gherkin, JUnit, Selenium, Maven, Faker, Lombok, AssertJ.
  My framework is built with using Page Object Model design pattern for easy maintenance and scalability. Besides, I also used Page Factory pattern for my page classes and Singleton pattern for my Driver class.
  My framework structure consists of packages for page classes, runner classes, step definition classes and hooks, utilities and features files. In my framework the cucumber feature files are
  connected to the step definition classes through a runner class where all test run configuration is added.


  Cucumber BDD Framework components:
    Java - programming language to write code
    Selenium - to automate UI scenarios
    Junit - organize, configure, and execute tests
    Maven - define the project structure, manage dependencies, run tests through command line
    Faker - generate mock data for data driven testing
    Lombok - generate getter and setters automatically for page classes
    AssertJ - enable soft assertions since Junit does not offer them
    .gitignore file - to exclude non-project related files from being version controlled (tracked and pushed to GitHub)
    config.properties file - to store project's global variables such as env variables, usernames, passwords, paths, etc.
    Utility Classes - classes that support our automated tests
    Reports - are implemented with Cucumber's own built in HTML


  Architecture:
       -Design patterns used: Page Object Model and Page Factory, Singleton
       -OOP Principles used:
       - Encapsulation - I used it my page classes by making webelements private and provide public getters
       - Inheritance - I used it in my page classes by creating a parent class and adding all common webelements there and extending subclasses from that super class
       - I haven't implemented Abstraction or Polymorphism in any of my code since I had no need for them. But I can give you examples of them in my framework code.
         Polymorphism ->  WebDriver driver = new ChromeDriver()
         Abstraction -> WebDriver, WebElement, Alert, JavaScriptExecutor, TakesScreenshot

  Types of tests the framework supports:
    Functional,
    Smoke,
    Regression,
    Integration,
    UI, API, DB
    Cross Browser,
    Headless,
    Parallel,
    Data-Driven tests
    End-to-end tests




How to manage sensitive data on a collaborative project?


When collaborating on a project, you should never commit sensitive data, such as API keys or passwords, to the source code repository.Here are the some solutions to handle this:


1. Use a .gitignore file along with an example configuration file.
The .gitignore file is a text file that tells Git which files or folders to ignore in a project. You can add config.properties to the .gitignore file, and this file won't be tracked by Git.
Then add and commit an example configuration file into the repository, named something like 'config.properties.example', which includes all the keys your application needs but with empty or placeholder values. This way, other developers know what keys they need to provide, but the sensitive information is not exposed. Sample config.properties.example file:

    username=your_username_here
    password=your_password_here
    browser=browser_here
    QA=qa_env_link_here
    STAGING=staging_env_link_here
    DEV=dev_env_link_here
    db_url=db_url_here
    db_username=db_password_here
    db_password=db_password_here
    api_base_uri=your_api_base_uri_here
    api_key=your_api_key_here
 When others clone the repository, they should create a real config.properties file locally, copy the config.properties.example file content to config.properties and replace your_{credential}_here with their actual credentials.



2. Another common practice is to store sensitive information in environment variables either directly in the operating system settings or in IDE Run settings. This keeps sensitive data out of your code altogether. In your code, you would then access these values using the appropriate syntax for your programming language like System.getenv("envVarName") in Java;

Set environment variables in IntelliJ:

    - From the main menu, select Run -> Edit Configurations.
    - In the Environment variables field and click the page button next to it.
    - In the Environment Variables dialog, click the plus (+) button to add a new environment variable.
    - Enter the names and values of the environment variables, then click OK.
    - Click OK in the Run/Debug Configurations dialog to save your changes.

    Now, every time you run your application using this run configuration, IntelliJ IDEA will set the environment variables for the duration of the run session.

3. For a more secure and robust solution, especially for larger projects or organizations, secrets management tool or service such as AWS Secrets Manager, Azure Key Vault, or Google Cloud Secret Manager can be used.





















